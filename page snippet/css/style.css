html,
body {
    margin: 0;
}

html {
    min-height: 100%;
    box-sizing: border-box;
    font-size: 10px;
}

body {
    height: 100%;
    width: 100%;
    background-image: linear-gradient(180deg, #5961F9 0%, #2AFADF 40%, #F9FEA5 100%);
    background-repeat: no-repeat;
}
.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
*,
*:before,
*:after {
    box-sizing: inherit;
}

h1,
p {
    color: #204754;
    font-family: 'Nunito', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

h1 {
    margin-bottom: 1rem;
    font-size: 4rem;
}

p {
    font-size: 2rem;
    line-height: 2.8rem;
}

p:last-child {
    margin-bottom: -6px;
}

.site-wrap {
    max-width: 900px;
    margin: 0 auto;
    padding: 10rem 2rem;
}

section {
    margin-bottom: 10rem;
    padding: 4rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0px 0px 0 1px rgba(32, 71, 84, 0.03), 0px 0px 0 3px rgba(32, 71, 84, 0.02);
}

section:last-child {
    margin-bottom: 0;
}

[data-scroll] {
    opacity: 0;
    will-change: transform, scale, opacity;
    transform: translateY(6rem) scale(0.93);
    transition: all 1.5s cubic-bezier(0.165, 0.84, 0.44, 1);
}

[data-scroll="in"] {
    opacity: 1;
    transform: translateY(0) scale(1);
}

.splitting .char {
    color: transparent;
}

.splitting .char:after {
    visibility: visible;
    color: #204754;
    opacity: 0;
    transform: translateY(30%);
    transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transition-delay: calc(.2s + (.04s * var(--char-index)));
}

[data-scroll="in"] .char:after {
    opacity: 1;
    transform: translateY(0);
}

@media (max-width: 600px) {
    h1 {
        font-size: 3.4rem;
        line-height: 3.6rem;
    }

    p {
        font-size: 1.7rem;
        line-height: 2.5rem;
    }

    .site-wrap {
        padding: 6rem 1rem;
    }

    section {
        margin-bottom: 6rem;
        padding: 2.4rem;
    }
}

/* Spliting Css */
/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
    display: inline-block;
    color: black;
}

/* Psuedo-element chars */
.splitting .char {
    position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
    content: attr(data-char);
    position: absolute;
    top: 0;
    left: 0;
    visibility: hidden;
    transition: inherit;
    user-select: none;
}

/* Expanded CSS Variables */

.splitting {
    /* The center word index */
    --word-center: calc((var(--word-total) - 1) / 2);

    /* The center character index */
    --char-center: calc((var(--char-total) - 1) / 2);

    /* The center character index */
    --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
    /* Pecent (0-1) of the word's position */
    --word-percent: calc(var(--word-index) / var(--word-total));

    /* Pecent (0-1) of the line's position */
    --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
    /* Percent (0-1) of the char's position */
    --char-percent: calc(var(--char-index) / var(--char-total));

    /* Offset from center, positive & negative */
    --char-offset: calc(var(--char-index) - var(--char-center));

    /* Absolute distance from center, only positive */
    --distance: calc((var(--char-offset) * var(--char-offset)) / var(--char-center));

    /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
    --distance-sine: calc(var(--char-offset) / var(--char-center));

    /* Distance from center where 1 is far left/far right, 0 is center */
    --distance-percent: calc((var(--distance) / var(--char-center)));
}